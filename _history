{"entries":[{"timestamp":1739326681983,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"Gp3.wkX$BUnG1xY*00*V\" x=\"20\" y=\"20"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\"></"]],"start1":12,"start2":12,"length1":135,"length2":62},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," id=\"+To(On*GH%BmH`09p9Fi\" x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":49,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"/**\n* BP Lab Extensions\n*/\n//% weight=1 color=#0066CB icon=\"\\uf0ad\" block=\"BP Lab\"\nnamespace BPLAB {\n\n    // 그룹 1: LCD 관련\n    // -----------------------------------------------------------------------------\n    let i2cAddr: number // 0x3F: PCF8574A, 0x27: PCF8574 \n    let BK: number      // Backlight control\n    let RS: number      // Command/Data selection\n\n    // LCD register setup\n    function setreg(d: number) {\n        pins.i2cWriteNumber(i2cAddr, d, NumberFormat.Int8LE)\n        basic.pause(1)\n    }\n\n    // Send data through I2C bus\n    function set(d: number) {\n        d = d & 0xF0\n        d = d + BK + RS\n        setreg(d)\n        setreg(d + 4)\n        setreg(d)\n    }\n\n    // Send command\n    function cmd(d: number) {\n        RS = 0\n        set(d)\n        set(d << 4)\n    }\n\n    // Send data\n    function dat(d: number) {\n        RS = 1\n        set(d)\n        set(d << 4)\n    }\n\n    // Auto detect LCD address\n    function AutoAddr() {\n        let k = true\n        let addr = 0x20\n        let d1 = 0, d2 = 0\n        while (k && (addr < 0x28)) {\n            pins.i2cWriteNumber(addr, -1, NumberFormat.Int32LE)\n            d1 = pins.i2cReadNumber(addr, NumberFormat.Int8LE) % 16\n            pins.i2cWriteNumber(addr, 0, NumberFormat.Int16LE)\n            d2 = pins.i2cReadNumber(addr, NumberFormat.Int8LE)\n            if ((d1 == 7) && (d2 == 0)) k = false\n            else addr += 1\n        }\n        if (!k) return addr\n\n        addr = 0x38\n        while (k && (addr < 0x40)) {\n            pins.i2cWriteNumber(addr, -1, NumberFormat.Int32LE)\n            d1 = pins.i2cReadNumber(addr, NumberFormat.Int8LE) % 16\n            pins.i2cWriteNumber(addr, 0, NumberFormat.Int16LE)\n            d2 = pins.i2cReadNumber(addr, NumberFormat.Int8LE)\n            if ((d1 == 7) && (d2 == 0)) k = false\n            else addr += 1\n        }\n        if (!k) return addr\n        else return 0\n    }\n\n    /**\n     * Initialize LCD and set I2C address. PCF8574/PCF8574A address is 39/63\n     * @param Addr LCD i2c address, eg: 0, 39, 63. 0 for auto detection\n     */\n    //% group=\"LCD\"\n    //% color=#0fbc11\n    //% blockId=\"I2C_LCD1620_SET_ADDRESS\" block=\"LCD initialize with Address %addr\"\n    //% weight=100 blockGap=8\n    //% parts=LCD1602_I2C trackArgs=0\n    export function LcdInit(Addr: number) {\n        if (Addr == 0) i2cAddr = AutoAddr()\n        else i2cAddr = Addr\n        BK = 8\n        RS = 0\n        cmd(0x33)       // Set 4-bit mode\n        basic.pause(5)\n        set(0x30)\n        basic.pause(5)\n        set(0x20)\n        basic.pause(5)\n        cmd(0x28)       // Set mode\n        cmd(0x0C)\n        cmd(0x06)\n        cmd(0x01)       // Clear screen\n    }\n\n    /**\n     * Display number at specified position on LCD\n     * @param n number to display, eg: 10, 100, 200\n     * @param x LCD column position, eg: 0\n     * @param y LCD row position, eg: 0\n     */\n    //% group=\"LCD\"\n    //% color=#0fbc11\n    //% blockId=\"I2C_LCD1620_SHOW_NUMBER\" block=\"show number %n|at x %x|y %y\"\n    //% weight=90 blockGap=8\n    //% x.min=0 x.max=15\n    //% y.min=0 y.max=1\n    //% parts=LCD1602_I2C trackArgs=0\n    export function ShowNumber(n: number, x: number, y: number): void {\n        let s = n.toString()\n        ShowString(s, x, y)\n    }\n\n    /**\n     * Display string at specified position on LCD\n     * @param s string to display, eg: \"Hello\"\n     * @param x LCD column position, [0 - 15], eg: 0\n     * @param y LCD row position, [0 - 1], eg: 0\n     */\n    //% group=\"LCD\"\n    //% color=#0fbc11\n    //% blockId=\"I2C_LCD1620_SHOW_STRING\" block=\"show string %s|at x %x|y %y\"\n    //% weight=90 blockGap=8\n    //% x.min=0 x.max=15\n    //% y.min=0 y.max=1\n    //% parts=LCD1602_I2C trackArgs=0\n    export function ShowString(s: string, x: number, y: number): void {\n        let a: number\n\n        if (y > 0)\n            a = 0xC0\n        else\n            a = 0x80\n        a += x\n        cmd(a)\n\n        for (let i = 0; i < s.length; i++) {\n            dat(s.charCodeAt(i))\n        }\n    }\n\n    /**\n     * Turn on LCD\n     */\n    //% group=\"LCD\"\n    //% color=#0fbc11\n    //% blockId=\"I2C_LCD1620_ON\" block=\"turn on LCD\"\n    //% weight=81 blockGap=8\n    //% parts=LCD1602_I2C trackArgs=0\n    export function on(): void {\n        cmd(0x0C)\n    }\n\n    /**\n     * Turn off LCD\n     */\n    //% group=\"LCD\"\n    //% color=#0fbc11\n    //% blockId=\"I2C_LCD1620_OFF\" block=\"turn off LCD\"\n    //% weight=80 blockGap=8\n    //% parts=LCD1602_I2C trackArgs=0\n    export function off(): void {\n        cmd(0x08)\n    }\n\n    /**\n     * Clear all display contents\n     */\n    //% group=\"LCD\"\n    //% color=#0fbc11\n    //% blockId=\"I2C_LCD1620_CLEAR\" block=\"clear LCD\"\n    //% weight=85 blockGap=8\n    //% parts=LCD1602_I2C trackArgs=0\n    export function clear(): void {\n        cmd(0x01)\n    }\n\n    /**\n     * Turn on LCD backlight\n     */\n    //% group=\"LCD\"\n    //% color=#0fbc11\n    //% blockId=\"I2C_LCD1620_BACKLIGHT_ON\" block=\"turn on backlight\"\n    //% weight=71 blockGap=8\n    //% parts=LCD1602_I2C trackArgs=0\n    export function BacklightOn(): void {\n        BK = 8\n        cmd(0)\n    }\n\n    /**\n     * Turn off LCD backlight\n     */\n    //% group=\"LCD\"\n    //% color=#0fbc11\n    //% blockId=\"I2C_LCD1620_BACKLIGHT_OFF\" block=\"turn off backlight\"\n    //% weight=70 blockGap=8\n    //% parts=LCD1602_I2C trackArgs=0\n    export function BacklightOff(): void {\n        BK = 0\n        cmd(0)\n    }\n\n    /**\n     * Shift display left\n     */\n    //% group=\"LCD\"\n    //% color=#0fbc11\n    //% blockId=\"I2C_LCD1620_SHL\" block=\"Shift Left\"\n    //% weight=61 blockGap=8\n    //% parts=LCD1602_I2C trackArgs=0\n    export function shl(): void {\n        cmd(0x18)\n    }\n\n    /**\n     * Shift display right\n     */\n    //% group=\"LCD\"\n    //% color=#0fbc11\n    //% blockId=\"I2C_LCD1620_SHR\" block=\"Shift Right\"\n    //% weight=60 blockGap=8\n    //% parts=LCD1602_I2C trackArgs=0\n    export function shr(): void {\n        cmd(0x1C)\n    }\n\n    // 그룹 2: 7-Segment 관련\n    // -----------------------------------------------------------------------------\n    let TM1637_CMD1 = 0x40;\n    let TM1637_CMD2 = 0xC0;\n    let TM1637_CMD3 = 0x80;\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n\n    /**\n     * TM1637 LED display\n     */\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        count: number;  // number of LEDs\n\n        /**\n         * initial TM1637\n         */\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(this.count);\n            this.clear();\n        }\n\n        /**\n         * Start \n         */\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n\n        /**\n         * Stop\n         */\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n\n        /**\n         * send command1\n         */\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(TM1637_CMD1);\n            this._stop();\n        }\n\n        /**\n         * send command3\n         */\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(TM1637_CMD3 | this._ON | this.brightness);\n            this._stop();\n        }\n\n        /**\n         * send a byte to 2-wire interface\n         */\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n\n        /**\n         * set TM1637 intensity, range is [0-8], 0 is off.\n         * @param val the brightness of the TM1637, eg: 7\n         */\n        //% group=\"7-Segment\"\n        //% color=#50A820\n        //% blockId=\"TM1637_set_intensity\" block=\"%tm|set intensity %val\"\n        //% weight=50 blockGap=8\n        //% parts=\"TM1637\"\n        intensity(val: number = 7) {\n            if (val < 1) {\n                this.off();\n                return;\n            }\n            if (val > 8) val = 8;\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n\n        /**\n         * set data to TM1637, with given bit\n         */\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(TM1637_CMD2 | (bit % this.count))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n\n        /**\n         * show a number in given position. \n         * @param num number will show, eg: 5\n         * @param bit the position of the LED, eg: 0\n         */\n        //% group=\"7-Segment\"\n        //% color=#50A820\n        //% blockId=\"TM1637_showbit\" block=\"%tm|show digit %num |at %bit\"\n        //% weight=90 blockGap=8\n        //% parts=\"TM1637\"\n        showbit(num: number = 5, bit: number = 0) {\n            this.buf[bit % this.count] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n\n        /**\n          * show a number. \n          * @param num is a number, eg: 0\n          */\n        //% group=\"7-Segment\"\n        //% color=#50A820\n        //% blockId=\"TM1637_shownum\" block=\"%tm|show number %num\"\n        //% weight=91 blockGap=8\n        //% parts=\"TM1637\"\n        showNumber(num: number) {\n            if (num < 0) {\n                this._dat(0, 0x40) // '-'\n                num = -num\n            }\n            else\n                this.showbit(Math.idiv(num, 1000) % 10)\n            this.showbit(num % 10, 3)\n            this.showbit(Math.idiv(num, 10) % 10, 2)\n            this.showbit(Math.idiv(num, 100) % 10, 1)\n        }\n\n        /**\n          * show a hex number. \n          * @param num is a hex number, eg: 0\n          */\n        //% group=\"7-Segment\"\n        //% color=#50A820\n        //% blockId=\"TM1637_showhex\" block=\"%tm|show hex number %num\"\n        //% weight=90 blockGap=8\n        //% parts=\"TM1637\"\n        showHex(num: number) {\n            if (num < 0) {\n                this._dat(0, 0x40) // '-'\n                num = -num\n            }\n            else\n                this.showbit((num >> 12) % 16)\n            this.showbit(num % 16, 3)\n            this.showbit((num >> 4) % 16, 2)\n            this.showbit((num >> 8) % 16, 1)\n        }\n\n        /**\n         * show or hide dot point. \n         * @param bit is the position, eg: 1\n         * @param show is show/hide dp, eg: true\n         */\n        //% group=\"7-Segment\"\n        //% color=#50A820\n        //% blockId=\"TM1637_showDP\" block=\"%tm|DotPoint at %bit|show %show\"\n        //% weight=70 blockGap=8\n        //% parts=\"TM1637\"\n        showDP(bit: number = 1, show: boolean = true) {\n            bit = bit % this.count\n            if (show) this._dat(bit, this.buf[bit] | 0x80)\n            else this._dat(bit, this.buf[bit] & 0x7F)\n        }\n\n        /**\n         * clear LED. \n         */\n        //% group=\"7-Segment\"\n        //% color=#50A820\n        //% blockId=\"TM1637_clear\" block=\"clear %tm\"\n        //% weight=80 blockGap=8\n        //% parts=\"TM1637\"\n        clear() {\n            for (let i = 0; i < this.count; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n\n        /**\n         * turn on LED. \n         */\n        //% group=\"7-Segment\"\n        //% color=#50A820\n        //% blockId=\"TM1637_on\" block=\"turn on %tm\"\n        //% weight=86 blockGap=8\n        //% parts=\"TM1637\"\n        on() {\n            this._ON = 8;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n\n        /**\n         * turn off LED. \n         */\n        //% group=\"7-Segment\"\n        //% color=#50A820\n        //% blockId=\"TM1637_off\" block=\"turn off %tm\"\n        //% weight=85 blockGap=8\n        //% parts=\"TM1637\"\n        off() {\n            this._ON = 0;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n    }\n\n    /**\n     * create a TM1637 object.\n     * @param clk the CLK pin for TM1637, eg: DigitalPin.P1\n     * @param dio the DIO pin for TM1637, eg: DigitalPin.P2\n     * @param intensity the brightness of the LED, eg: 7\n     * @param count the count of the LED, eg: 4\n     */\n    //% group=\"7-Segment\"\n    //% color=#50A820\n    //% weight=200 blockGap=8\n    //% blockId=\"TM1637_create\" block=\"CLK %clk|DIO %dio|intensity %intensity|LED count %count\"\n    export function create(clk: DigitalPin, dio: DigitalPin, intensity: number, count: number): TM1637LEDs {\n        let tm = new TM1637LEDs();\n        tm.clk = clk;\n        tm.dio = dio;\n        if ((count < 1) || (count > 5)) count = 4;\n        tm.count = count;\n        tm.brightness = intensity;\n        tm.init();\n        return tm;\n    }\n\n    // 그룹 3: Ultrasonic 관련\n    // -----------------------------------------------------------------------------\n    enum PingUnit {\n        //% block=\"μs\"\n        MicroSeconds,\n        //% block=\"cm\"\n        Centimeters,\n        //% block=\"inches\"\n        Inches\n    }\n\n    /**\n     * Send a ping and get the echo time (in microseconds) as a result\n     * @param trig tigger pin\n     * @param echo echo pin\n     * @param unit desired conversion unit\n     * @param maxCmDistance maximum distance in centimeters (default is 500)\n     */\n    //% group=\"Ultrasonic\"\n    //% color=#2c3e50\n    //% blockId=sonar_ping block=\"ping trig %trig|echo %echo|unit %unit\"\n    export function ping(trig: DigitalPin, echo: DigitalPin, unit: PingUnit, maxCmDistance = 500): number {\n        // send pulse\n        pins.setPull(trig, PinPullMode.PullNone);\n        pins.digitalWritePin(trig, 0);\n        control.waitMicros(2);\n        pins.digitalWritePin(trig, 1);\n        control.waitMicros(10);\n        pins.digitalWritePin(trig, 0);\n\n        // read pulse\n        const d = pins.pulseIn(echo, PulseValue.High, maxCmDistance * 58);\n\n        switch (unit) {\n            case PingUnit.Centimeters: return Math.idiv(d, 58);\n            case PingUnit.Inches: return Math.idiv(d, 148);\n            default: return d;\n        }\n    }\n\n    // 그룹 4: DHT11 관련\n    // -----------------------------------------------------------------------------\n    export enum DHT11Type {\n        //% block=\"temperature(℃)\" enumval=0\n        DHT11_temperature_C,\n\n        //% block=\"temperature(℉)\" enumval=1\n        DHT11_temperature_F,\n\n        //% block=\"humidity(0~100)\" enumval=2\n        DHT11_humidity,\n    }\n\n    let dht11Humidity = 0\n    let dht11Temperature = 0\n\n    /**\n     * get dht11 temperature and humidity Value\n     * @param dht11pin describe parameter here\n     */\n    //% group=\"DHT11\"\n    //% color=#ff7a4b\n    //% blockId=\"readdht11\" block=\"value of dht11 %dht11type| at pin %dht11pin\"\n    export function dht11value(dht11type: DHT11Type, dht11pin: DigitalPin): number {\n        const DHT11_TIMEOUT = 100\n        const buffer = pins.createBuffer(40)\n        const data = [0, 0, 0, 0, 0]\n        let startTime = control.micros()\n\n        if (control.hardwareVersion().slice(0, 1) !== '1') { // V2\n            // TODO: V2 bug\n            pins.digitalReadPin(DigitalPin.P0);\n            pins.digitalReadPin(DigitalPin.P1);\n            pins.digitalReadPin(DigitalPin.P2);\n            pins.digitalReadPin(DigitalPin.P3);\n            pins.digitalReadPin(DigitalPin.P4);\n            pins.digitalReadPin(DigitalPin.P10);\n\n            // 1.start signal\n            pins.digitalWritePin(dht11pin, 0)\n            basic.pause(18)\n\n            // 2.pull up and wait 40us\n            pins.setPull(dht11pin, PinPullMode.PullUp)\n            pins.digitalReadPin(dht11pin)\n            control.waitMicros(40)\n\n            // 3.read data\n            startTime = control.micros()\n            while (pins.digitalReadPin(dht11pin) === 0) {\n                if (control.micros() - startTime > DHT11_TIMEOUT) break\n            }\n            startTime = control.micros()\n            while (pins.digitalReadPin(dht11pin) === 1) {\n                if (control.micros() - startTime > DHT11_TIMEOUT) break\n            }\n\n            for (let dataBits = 0; dataBits < 40; dataBits++) {\n                startTime = control.micros()\n                while (pins.digitalReadPin(dht11pin) === 1) {\n                    if (control.micros() - startTime > DHT11_TIMEOUT) break\n                }\n                startTime = control.micros()\n                while (pins.digitalReadPin(dht11pin) === 0) {\n                    if (control.micros() - startTime > DHT11_TIMEOUT) break\n                }\n                control.waitMicros(28)\n                if (pins.digitalReadPin(dht11pin) === 1) {\n                    buffer[dataBits] = 1\n                }\n            }\n        } else { // V1\n            // 1.start signal\n            pins.digitalWritePin(dht11pin, 0)\n            basic.pause(18)\n\n            // 2.pull up and wait 40us\n            pins.setPull(dht11pin, PinPullMode.PullUp)\n            pins.digitalReadPin(dht11pin)\n            control.waitMicros(40)\n\n            // 3.read data\n            if (pins.digitalReadPin(dht11pin) === 0) {\n                while (pins.digitalReadPin(dht11pin) === 0);\n                while (pins.digitalReadPin(dht11pin) === 1);\n\n                for (let dataBits = 0; dataBits < 40; dataBits++) {\n                    while (pins.digitalReadPin(dht11pin) === 1);\n                    while (pins.digitalReadPin(dht11pin) === 0);\n                    control.waitMicros(28)\n                    if (pins.digitalReadPin(dht11pin) === 1) {\n                        buffer[dataBits] = 1\n                    }\n                }\n            }\n        }\n\n        for (let i = 0; i < 5; i++) {\n            for (let j = 0; j < 8; j++) {\n                if (buffer[8 * i + j] === 1) {\n                    data[i] += 2 ** (7 - j)\n                }\n            }\n        }\n\n        if (((data[0] + data[1] + data[2] + data[3]) & 0xff) === data[4]) {\n            dht11Humidity = data[0] + data[1] * 0.1\n            dht11Temperature = data[2] + data[3] * 0.1\n        }\n\n        switch (dht11type) {\n            case DHT11Type.DHT11_temperature_C:\n                return dht11Temperature\n            case DHT11Type.DHT11_temperature_F:\n                return (dht11Temperature * 1.8) + 32\n            case DHT11Type.DHT11_humidity:\n                return dht11Humidity\n        }\n    }\n\n    // 그룹 5: Servo 365 관련\n    // -----------------------------------------------------------------------------\n    /**\n        * Spins the motor in one direction at full speed\n        * @param pin Which pin the motor is on\n        */\n    //% group=\"Servo 365\"\n    //% color=#2b569b\n    //% blockId=spin_one_way weight=100\n    //% block=\"spin one way pin %pin\"\n    export function spin_one_way(pin = AnalogPin.P1): void {\n        pins.servoWritePin(pin, 180)\n    }\n\n    /**\n    * Spins the motor in other direction at full speed\n    * @param pin Which pin the motor is on\n    */\n    //% group=\"Servo 365\"\n    //% color=#2b569b\n    //% blockId=spin_other_way weight=80\n    //% block=\"spin other way pin %pin\"\n    export function spin_other_way(pin = AnalogPin.P2): void {\n        pins.servoWritePin(pin, 0)\n    }\n\n    /**\n    * Spins the motor in one direction, with a speed from 0 to 100\n    * @param pin Which pin the motor is on\n    * @param speed Speed from 0 to 100\n    */\n    //% group=\"Servo 365\"\n    //% color=#2b569b\n    //% blockId=spin_one_way_with_speed weight=60\n    //% block=\"spin one way pin %pin | with speed %speed\"\n    //% speed.min=0 speed.max=100\n    export function spin_one_way_with_speed(pin = AnalogPin.P1, speed = 50): void {\n        let spin = (speed * 90) / 100 + 90\n        pins.servoWritePin(pin, spin)\n    }\n\n    /**\n    * Spins the motor in the other direction, with a speed from 0 to 100\n    * @param pin Which pin the motor is on\n    * @param speed Speed from 0 to 100\n    */\n    //% group=\"Servo 365\"\n    //% color=#2b569b\n    //% blockId=spin_other_way_with_speed weight=40\n    //% block=\"spin other way pin %pin | with speed %speed\"\n    //% speed.min=0 speed.max=100\n    export function spin_other_way_with_speed(pin = AnalogPin.P2, speed = 50): void {\n        let spin = 90 - (speed * 90) / 100\n        pins.servoWritePin(pin, spin)\n    }\n\n    /**\n    * Turns off the motor at this pin\n    * @param pin Which pin the motor is on\n    */\n    //% group=\"Servo 365\"\n    //% color=#2b569b\n    //% blockId=turn_off_motor weight=20\n    //% block=\"turn off motor at pin %pin\"\n    export function turn_off_motor(pin = DigitalPin.P1): void {\n        pins.digitalWritePin(pin, 0)\n    }\n}"],[1,"\n"]],"start1":0,"start2":0,"length1":20919,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":229,"start2":229,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1739326681982,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"BPLAB\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1739326715445}